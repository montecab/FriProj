#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;

[InitializeOnLoad]
public class BuildVersionEditorUpdate{

  public static string version {
    get;
    private set;
  }

  public static int build {
    get;
    private set;
  }

  public static string platform {
    get;
    private set;
  }

  const string OUTPUT_CLASS_FILENAME = "Assets/Scripts/Turing/BuildTools/BuildVersion.cs";
  const string BUILD_GRADLE_FILENAME = "Platforms/Go2Android/app/build.gradle";
  const string PO_FOLDER_PATH = "Assets/Resources/Strings/wonder/";

  const string GRADLE_TEMPLATE = @"/*
  Automatically generated by BuildVersionEditorUpdate - DO NOT EDIT
*/
apply plugin: 'com.android.application'
android {
    compileSdkVersion 21
    buildToolsVersion ""21.1.1""

    defaultConfig {
        applicationId ""com.makewonder.wonder""
        minSdkVersion 19
        targetSdkVersion 21
        versionCode BUILD_NUMBER
        versionName ""APP_VERSION""
    }

    signingConfigs {

        release {
            storeFile file('../../../../../certs/Android/apps/Turing/TuringRelease.jks')
            storePassword ""Buildprogrampl4y""
            keyAlias ""WWAndroidKey""
            keyPassword ""Buildprogrampl4y""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.2'
    compile 'com.makewonder:ww-chrome-library:1.1-SNAPSHOT'
    compile project(':Wonder')
}";
  const string TOK_REPL_APP_VERSION   = "APP_VERSION";
  const string TOK_REPL_BUILD_NUMBER  = "BUILD_NUMBER";

  static BuildVersionEditorUpdate (){
    version = "0.0.0";
    build = 0;
    platform = "None";
    UpdateBuildVersionValues();
    WriteBuildVersionClassFile();
    if (platform == "Android") {
      WriteGradleBuildFile();
    }
    EditorApplication.update += Update;
  }

  static void Update(){
    if (UpdateBuildVersionValues()){
      WriteBuildVersionClassFile();
      if (platform == "Android") {
        WriteGradleBuildFile();
      }
    }
  }

  public static void UpdateBuildInfo(BuildTarget target, string buildVersion, int buildNumber){
	PlayerSettings.bundleVersion = buildVersion;
	PlayerSettings.Android.bundleVersionCode = buildNumber;
	PlayerSettings.iOS.buildNumber = buildNumber.ToString();
    string newVersion = PlayerSettings.bundleVersion;
	int newBuild = buildNumber;
    string newPlatform = target.ToString();
    SetupNewBuildInfo(newVersion, newBuild, newPlatform);
    WriteBuildVersionClassFile();
    if(target==BuildTarget.Android){
      WriteGradleBuildFile();
    }
  }

  static bool iosBuildParseError = false;

  static int iosBuildNumber(){
    int result;
    if (int.TryParse(PlayerSettings.iOS.buildNumber, out result)){
      iosBuildParseError = false;
      return result;
    }
    if (!iosBuildParseError){
      Debug.LogError("Error parsing PlayerSettings.iOS.buildNumber " + PlayerSettings.iOS.buildNumber + " to an integer.");
      EditorUtility.DisplayDialog("Error parsing PlayerSettings.iOS.buildNumber to an integer ", PlayerSettings.iOS.buildNumber, "OK");
      iosBuildParseError = true;
    }
    return build;
  }

  static bool UpdateBuildVersionValues(){
    string newVersion = PlayerSettings.bundleVersion;
    int newBuild = build;
    string newPlatform = platform;
    #if UNITY_ANDROID
    newBuild = PlayerSettings.Android.bundleVersionCode;
    newPlatform = "Android";
    #elif UNITY_IOS
    newBuild = iosBuildNumber();
    newPlatform = "iOS";
    #else
    newBuild = Mathf.Max(PlayerSettings.Android.bundleVersionCode, iosBuildNumber());
    #if UNITY_STANDALONE
    newPlatform = "Standalone";
    #elif UNITY_WEBGL
    newPlatform = "WebGL";
    #else
    newPlatform = "Other";
    #endif
    #endif

    return SetupNewBuildInfo(newVersion, newBuild, newPlatform);
  }

  static bool SetupNewBuildInfo(string newVersion, int newBuild, string newPlatform){
    if ((!version.Equals(newVersion)) || (build != newBuild) || (!platform.Equals(newPlatform))){
      if(AssetDatabase.IsValidFolder(PO_FOLDER_PATH+newVersion)){
        version = newVersion;
        build = newBuild;
        platform = newPlatform;
        return true;
      }
      else{
        
        Debug.LogError("Cancel updating BuildVersion.cs because this version of PO folder doesn't exist."
          + " newVersion="   + PlayerSettings.bundleVersion
          + ", version="     + version
          + ", newBuild="    + newBuild
          + ", build="       + build
          + ", newPlatform=" + newPlatform
          + ", platform="    + platform
          );
      }
    }
    return false;
  }

  static string BuildVersionClassString(){
    StringBuilder sb = new StringBuilder();
    sb.Append("/// Automatically generated by BuildVersionEditorUpdate - DO NOT EDIT\n");
    sb.Append("public static class BuildVersion {\n");
    sb.Append("  public static readonly string VERSION = \"" + version + "\";\n");
    sb.Append("  public static readonly int BUILD = " + build + ";\n");
    sb.Append("  public static readonly string PLATFORM = \"" + platform + "\";\n");
    sb.Append("}");
    return sb.ToString();
  }

  static void WriteBuildVersionClassFile(){
//    Debug.Log("Updating BuildVersion Class with version=" + version + ", build=" + build + ", platform=" + platform);
    try{
      
      using (StreamWriter sw = new StreamWriter(OUTPUT_CLASS_FILENAME, false)){
        sw.WriteLine(BuildVersionClassString());
      }
    } catch (System.Exception ex){
      Debug.LogError("Unable to write BuildVersion class at " + OUTPUT_CLASS_FILENAME);
      Debug.LogError(ex.ToString());
      EditorUtility.DisplayDialog("Error writing BuildVersion class file at " + OUTPUT_CLASS_FILENAME, ex.ToString(), "OK");
    }
  }

  static void WriteGradleBuildFile(){
    string gradleBuildText = GRADLE_TEMPLATE;
    gradleBuildText = gradleBuildText.Replace(TOK_REPL_APP_VERSION , version);
    gradleBuildText = gradleBuildText.Replace(TOK_REPL_BUILD_NUMBER, build.ToString());
    try {
      using (StreamWriter sw = new StreamWriter(BUILD_GRADLE_FILENAME, false)){
        sw.WriteLine(gradleBuildText);
      }
    } catch (System.Exception ex){
      Debug.LogError("Unable to write gradle.build at " + BUILD_GRADLE_FILENAME);
      Debug.LogError(ex.ToString());
      EditorUtility.DisplayDialog("Error writing gradle.build file at " + BUILD_GRADLE_FILENAME, ex.ToString(), "OK");
    }
  }
}
#endif